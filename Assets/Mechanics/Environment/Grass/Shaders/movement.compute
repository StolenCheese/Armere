#pragma kernel CSMain
#pragma kernel CSMain


cbuffer MovementConstantBufferData{
	float angleOverride;
	float2 sizeOverride;
}

cbuffer CB{
    float3 cameraPosition;
    float deltatime;

    float time;
	float3 windDirection;

    float2 viewRadiusMinMax;

    //int pushers;
    int2 dispatchSize;
}; 

#include "MeshProperties.hlsl"
#include "MatrixStruct.hlsl"
 

StructuredBuffer<MeshProperties> _Properties;
RWStructuredBuffer<MatrixStruct> _Output;


#define pi 3.14159265359

#define OVERRIDE_DATA

#include "noiseSimplex.cginc"
#include "matrix.hlsl"
#include "quaternion.hlsl"

float3x3 AngleAxis3x3(float angle, float3 axis)
{
    float c, s;
    sincos(angle, s, c);

    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    return float3x3(
        t * x * x + c,      t * x * y - s * z,  t * x * z + s * y,
        t * x * y + s * z,  t * y * y + c,      t * y * z - s * x,
        t * x * z - s * y,  t * y * z + s * x,  t * z * z + c
    );
}


// For the sake of simplicity, only using 1, 1, 1 threads.
//lol no
[numthreads(THREADGROUPS,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {

    uint index = id.x;
	//Clear the output buffer
	//TODO: Never make this dumb mistake again
	//_Output[index] = (MatrixStruct)0;


	// In a transform matrix, the position (translation) vector is the last column.

	//float damp = 0;
	//float3 dampDir = float3(0.01,0,0);

	// #ifdef GRASS_PUSHERS
	// 	for (int i = 0; i < pushers; i++){
	// 		float effect =  distance(properties.position, _PusherPositions[i].xyz);
	// 		float radius = _PusherPositions[i].w;

	// 		effect = (radius- clamp(0.0, radius, effect))/radius;

	// 		damp = max(damp,effect);
	// 		dampDir += (properties.position - _PusherPositions[i].xyz) * effect;
	// 	}
	// #endif

	//float3 dampAxis = cross(normalize(dampDir),float3(0,1,0));

	// Scale and reverse distance so that we get a value which fades as it gets further away.
	// Max distance is 5.0.

	//_Properties[id.x].rotation.y += 1 * deltatime;


	
	// 			snoise(properties.position.xz*0.02 + time*0.1) * (1-damp) * 0.25 + pi,
	// 			snoise(properties.position.zx*0.02 + time*0.1) * (1-damp) * 0.25);

	// The amount of wind decreases as damp increases
	//_Properties[id.x].rotation.x += damp*pi* 0.5 +pi;

	
	uint placedIndex = index;
	//float4x4 dampRotation = rotationMatrix(dampAxis,-damp * pi *0.5);
	MeshProperties properties = _Properties[index];


	MatrixStruct output = (MatrixStruct)0;
#ifdef OVERRIDE_DATA
	float4 rotation = rotate_angle_axis(angleOverride,float3(0,1,0));
#else
	float4x4 rotation = AngleAxis4x4(properties.yRot,float3(0,1,0));
#endif
	float windStrength = length(windDirection);

	float2 size = properties.size;


	float x = snoise(properties.position.xz * 0.05 + float2(time,time) * 0.2) * 0.1;
	float t = snoise(properties.position.xz * 0.05 ) + time;
	t /= size.y;

	// Apply translation to existing matrix, which will be read in the shader.

	float distance = length(properties.position.xyz - cameraPosition) / properties.shrinkDistance;

	float2 viewRadius = viewRadiusMinMax ;

	float view = smoothstep(viewRadius.y,viewRadius.x,distance );
	size.y *= view;
	//If over the threshold completely disappear it
	//size.x *= 1 - step(viewRadius.y,distance);


	float angle = 0;
	angle += x;
	// angle += sin(x) * 0.2 + 0.5;
	angle += sin(t*2) * 0.1 *size.y;
	angle += sin(t*8 ) * 0.025 *size.y;
	angle *= windStrength;

	float4 windRot = rotate_angle_axis(angle,windDirection/windStrength);

	rotation = qmul(rotation,windRot);

	//Compose creates transform matrix from position, rotation(quat) , scale
	float4x4 rotationMat = quaternion_to_matrix(rotation);

	float4x4 worldTransform = m_scale(rotationMat,size.xyx ) ;// compose(properties.position,QUATERNION_IDENTITY,size.xyx);
	worldTransform = m_translate(worldTransform,properties.position ) ;// compose(properties.position,QUATERNION_IDENTITY,size.xyx);


	// output.worldTransform[0] = float4(rot[0],properties.position[0]);
	// output.worldTransform[1] = float4(rot[1],properties.position[1]);
	// output.worldTransform[2] = float4(rot[2],properties.position[2]);
	
	output.worldTransform[0] = worldTransform[0];
	output.worldTransform[1] = worldTransform[1];
	output.worldTransform[2] = worldTransform[2];

	output.color = properties.color ;
	_Output[placedIndex] = output;
}