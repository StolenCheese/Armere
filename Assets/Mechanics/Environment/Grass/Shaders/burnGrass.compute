// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "MeshProperties.cginc"

cbuffer CB{
    float dt;
    float3 burntColor;
}; 

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float2> FireMap;
RWStructuredBuffer<MeshProperties> _Properties;


[numthreads(THREADGROUPX,1,1)]
void CSMain (uint3 id: SV_DispatchThreadID)
{
    
    float2 uv = (_Properties[id.x].position.xz + 10.0 ) / 20.0;

    float fire = FireMap[uv * 16].x;

    //Reduce color by deltatime and colour
    _Properties[id.x].color.rgb = lerp(_Properties[id.x].color.rgb , burntColor, fire * dt); 
    _Properties[id.x].size.y = lerp(_Properties[id.x].size.y , 0.3, fire * dt); 

    //TODO: If fully burnt, mark for destruction
}
