// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "MeshProperties.hlsl"

cbuffer CB{

	float4x4 cameraFrustum;
}

RWStructuredBuffer<MeshProperties> _Grass;
RWStructuredBuffer<uint> _CullResult;
inline uint IsVisibleAfterFrustumCulling(float4 clipPos)
{
    return (clipPos.z > clipPos.w 
            || clipPos.x < -clipPos.w 
            || clipPos.x > clipPos.w 
            || clipPos.y < -clipPos.w 
            || clipPos.y > clipPos.w) 
            ? 0 : 1;
}
[numthreads(THREADGROUPS,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

	float4 clipSpace = mul(cameraFrustum,float4(_Grass[id.x].position,1));
	//_Grass[id.x].position = frustumPos;
    _CullResult[id.x] =saturate(_Grass[id.x].chunkID) && IsVisibleAfterFrustumCulling(clipSpace);// all(float4( saturate(_Grass[id.x].chunkID), abs(frustumPos) < 1));
}

